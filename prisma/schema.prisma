// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// This is a real time chat app.
model User {
  id                   String          @id @default(cuid()) @map("_id") @db.ObjectId
  name                 String?
  email                String?         @unique
  emailVerified        DateTime?
  hashedPassword       String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  converstaionIds      String[]        @db.ObjectId
  conversations        Conversation[]  @relation(fields: [converstaionIds], references: [id])
  sentMessageIds       String[]        @db.ObjectId
  sentMessages         Message[]       @relation("Sender")
  receivedMessageIds   String[]        @db.ObjectId
  receivedMessages     Message[]       @relation("Receiver", fields: [receivedMessageIds], references: [id])
  seenMessages         Message[]       @relation("Seen", fields: [seenMessageIds], references: [id])
  seenMessageIds       String[]        @db.ObjectId
  friendIds            String[]        @db.ObjectId
  friends              User[]          @relation("Friend", fields: [friendIds], references: [id])
  userId               String?         @db.ObjectId
  friendOf             User[]          @relation("Friend", fields: [friendIds], references: [id])
  friendshipRequestIds String[]        @db.ObjectId
  friendshipRequests   FriendRequest[] @relation("ReceivedRequests")
  sentRequestIds       String[]        @db.ObjectId
  sentRequests         FriendRequest[] @relation("SentRequests")
  Account              Account[]
}

model Account {
  id                String   @id @default(cuid()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_in        Int?
  token_type        String?
  scope             String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model FriendRequest {
  id         String   @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   String   @db.ObjectId
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  receiverId String   @db.ObjectId
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

model Conversation {
  id         String    @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userIds    String[]  @db.ObjectId
  users      User[]    @relation(fields: [userIds], references: [id])
  messageIds String    @db.ObjectId
  messages   Message[]
}

model Message {
  id             String       @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  senderId       String[]     @db.ObjectId
  sender         User         @relation("Sender", fields: [senderId], references: [id])
  text           String
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  receiverIds    String[]     @db.ObjectId
  receivers      User[]       @relation("Receiver", fields: [receiverIds], references: [id])
  seenByIds      String[]     @db.ObjectId
  seenBy         User[]       @relation("Seen", fields: [seenByIds], references: [id])
  seenTime       DateTime?
}
